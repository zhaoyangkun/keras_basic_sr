# 数据集
[dataset]
downsample_mode = "bicubic" # 下采样方式（"bicubic"、"second-order"）
# train_resource_path = "/run/media/zyk-arch/Data/数据集/DIV2K/DIV2K_train_HR" # 训练图片资源路径
# test_resource_path = "/run/media/zyk-arch/Data/数据集/DIV2K/DIV2K_valid_HR"  # 测试图片资源路径
# train_resource_path = "/home/hh/zyk/datasets/DF_2K/train_HR" # 训练图片资源路径
# test_resource_path = "/home/hh/zyk/datasets/DF_2K/valid_HR"  # 测试图片资源路径
train_resource_path = "F:\\数据集\\DIV2K\\DIV2K_train_HR" # 训练图片资源路径
test_resource_path = "F:\\数据集\\DIV2K\\DIV2K_valid_HR"  # 测试图片资源路径
scale_factor = 2                                       # 下采样倍数
train_hr_img_height = 128                              # 训练过程中原图高度
train_hr_img_width = 128                               # 训练过程中原图宽度
valid_hr_img_height = 128                              # 验证过程中原图高度
valid_hr_img_width = 128                               # 验证过程中原图宽度
max_workers = 4                                        # 处理图片的最大线程数
data_enhancement_factor = 1                            # 数据增强因子


# 评估数据集
[evaluate_dataset]
[evaluate_dataset.DIV2K]
lr_img_dir = ""        # 低分辨率图像文件夹路径，若 lr_img_dir 和 hr_img_dir 为空，表示使用 dataset 配置中的 test_resource_path 作为评估数据集
hr_img_dir = ""        # 原图文件夹路径
dataset_name = "DIV2K" # 数据集名称
is_count = true        # 是否进行统计，只能设置一个数据集进行统计

[evaluate_dataset.set5]
lr_img_dir = "./image/set5/LRbicx2" # 低分辨率图像文件夹路径
hr_img_dir = "./image/set5/GTmod12" # 原图文件夹路径
dataset_name = "Set5"               # 数据集名称
is_count = false                    # 是否进行统计

[evaluate_dataset.set14]
lr_img_dir = "./image/set14/LRbicx2" # 低分辨率图像文件夹路径
hr_img_dir = "./image/set14/GTmod12" # 原图文件夹路径
dataset_name = "Set14"               # 数据集名称
is_count = false                     # 是否进行统计

[evaluate_dataset.RealSRSet]
lr_img_dir = "./image/RealSR_JPEG/LRbicx2" # 低分辨率图像文件夹路径
hr_img_dir = "./image/RealSR_JPEG/GTmod12" # 原图文件夹路径
dataset_name = "RealSRSet"                 # 数据集名称
is_count = false                           # 是否进行统计


# 模型
[model]
model_name = "srcnn" # 模型名称（"srcnn"、"vdsr"、"srgan"、"esrgan"、"real-esrgan"、"ha-esrgan"）
mode = "train"       # 训练模式（"pretrain"、"train"）

# SRCNN
[model.srcnn]
result_path = "./result"  # 结果保存路径
epochs = 100              # 训练总轮数
init_epoch = 1            # 初始训练轮数
batch_size = 8            # 单次训练样本数
rdb_num = 16              # 残差块数目
log_interval = 20         # 打印日志间隔
save_images_interval = 1  # 保存图片间隔
save_models_interval = 1  # 保存模型间隔
save_history_interval = 1 # 保存历史数据（损失，准确率）间隔
pretrain_model_path = ""  # 预训练模型路径
use_sn = false            # 是否使用谱归一化层
use_mixed_float = false   # 是否使用混合精度
use_ema = false           # 是否使用 EMA

# VDSR
[model.vdsr]
result_path = "./result"  # 结果保存路径
epochs = 100              # 训练总轮数
init_epoch = 1            # 初始训练轮数
batch_size = 4            # 单次训练样本数
rdb_num = 16              # 残差块数目
log_interval = 20         # 打印日志间隔
save_images_interval = 1  # 保存图片间隔
save_models_interval = 1  # 保存模型间隔
save_history_interval = 1 # 保存历史数据（损失，准确率）间隔
pretrain_model_path = ""  # 预训练模型路径
use_sn = false            # 是否使用谱归一化层
use_mixed_float = false   # 是否使用混合精度
use_ema = false           # 是否使用 EMA

# SRGAN
[model.srgan]
result_path = "./result"                                                          # 结果保存路径
epochs = 100                                                                      # 训练总轮数
init_epoch = 1                                                                    # 初始训练轮数
batch_size = 1                                                                    # 单次训练样本数
rdb_num = 16                                                                      # 残差块数目
log_interval = 20                                                                 # 打印日志间隔
save_images_interval = 1                                                          # 保存图片间隔
save_models_interval = 1                                                          # 保存模型间隔
save_history_interval = 1                                                         # 保存历史数据（损失，准确率）间隔
pretrain_model_path = "./result/srgan/models/pretrain/gen_weights_epoch_100.ckpt" # 预训练模型路径
use_sn = false                                                                    # 是否使用谱归一化层
use_mixed_float = false                                                           # 是否使用混合精度
use_ema = false                                                                   # 是否使用 EMA

# ESRGAN
[model.esrgan]
result_path = "./result"  # 结果保存路径
epochs = 100              # 训练总轮数
init_epoch = 1            # 初始训练轮数
batch_size = 16           # 单次训练样本数
log_interval = 20         # 打印日志间隔
save_images_interval = 1  # 保存图片间隔
save_models_interval = 1  # 保存模型间隔
save_history_interval = 1 # 保存历史数据（损失，准确率）间隔
pretrain_model_path = ""  # 预训练模型路径
use_sn = false            # 是否使用谱归一化层
use_mixed_float = false   # 是否使用混合精度
use_ema = false           # 是否使用 EMA

# Real-ESRGAN
[model.real-esrgan]
result_path = "./result"  # 结果保存路径
batch_size = 4            # 单次训练样本数
epochs = 100              # 训练总轮数
init_epoch = 1            # 初始训练轮数
log_interval = 20         # 打印日志间隔
save_images_interval = 1  # 保存图片间隔
save_models_interval = 1  # 保存模型间隔
save_history_interval = 1 # 保存历史数据（损失，准确率）间隔
pretrain_model_path = ""  # 预训练模型路径
use_sn = true             # 是否使用谱归一化层
use_mixed_float = true    # 是否使用混合精度
use_ema = true            # 是否使用 EMA

# HA-ESRGAN
[model.ha-esrgan]
result_path = "./result"  # 结果保存路径
epochs = 100              # 训练总轮数
init_epoch = 1            # 初始训练轮数
batch_size = 2            # 单次训练样本数
log_interval = 20         # 打印日志间隔
save_images_interval = 1  # 保存图片间隔
save_models_interval = 1  # 保存模型间隔
save_history_interval = 1 # 保存历史数据（损失，准确率）间隔
pretrain_model_path = ""  # 预训练模型路径
use_sn = true             # 是否使用谱归一化层
use_mixed_float = false   # 是否使用混合精度
use_ema = false           # 是否使用 EMA


# 二阶退化模型
[second-order-degradation]
final_sinc_prob = 0.8

[second-order-degradation.kernel_props_1]
kernel_list = [
    "iso",
    "aniso",
    "generalized_iso",
    "generalized_aniso",
    "plateau_iso",
    "plateau_aniso",
]
kernel_prob = [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
sigma_x_range = [0.2, 3.0]
sigma_y_range = [0.2, 3.0]
betag_range = [0.5, 4.0]
betap_range = [1, 2]
sinc_prob = 0.1

[second-order-degradation.kernel_props_2]
kernel_list = [
    "iso",
    "aniso",
    "generalized_iso",
    "generalized_aniso",
    "plateau_iso",
    "plateau_aniso",
]
kernel_prob = [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
sigma_x_range = [0.2, 1.5]
sigma_y_range = [0.2, 1.5]
betag_range = [0.5, 4.0]
betap_range = [1, 2]
sinc_prob = 0.1

[second-order-degradation.feed_props_1]
resize_prob = [0.2, 0.7, 0.1]
resize_range = [0.15, 1.5]
gray_noise_prob = 0.4
gaussian_noise_prob = 0.5
noise_range = [1, 30]
poisson_scale_range = [0.05, 3.0]
jpeg_range = [30, 95]
blur_prob = 1.0

[second-order-degradation.feed_props_2]
resize_prob = [0.3, 0.4, 0.3]
resize_range = [0.3, 1.2]
gray_noise_prob = 0.4
gaussian_noise_prob = 0.5
noise_range = [1, 25]
poisson_scale_range = [0.05, 2.5]
jpeg_range = [30, 95]
blur_prob = 0.8
